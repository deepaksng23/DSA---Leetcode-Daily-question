
class Solution {
public:
    int smallestChair(vector<vector<int>>& times, int targetFriend) {
        int n = times.size();
        
      
        vector<pair<int, int>> friends;
        for (int i = 0; i < n; i++) {
            friends.push_back({times[i][0], i}); 
        }

  
        sort(friends.begin(), friends.end());

       
        priority_queue<int, vector<int>, greater<int>> availableChairs;
        for (int i = 0; i < n; i++) {
            availableChairs.push(i); 
        }

        
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> leavingQueue;
        
        for (int i = 0; i < n; i++) {
            int arrivalTime = friends[i].first;
            int friendIndex = friends[i].second;
            int leaveTime = times[friendIndex][1];

           
            while (!leavingQueue.empty() && leavingQueue.top().first <= arrivalTime) {
                int chairFreed = leavingQueue.top().second;
                leavingQueue.pop();
                availableChairs.push(chairFreed); 
            }

           
            int assignedChair = availableChairs.top();
            availableChairs.pop();

            
            if (friendIndex == targetFriend) {
                return assignedChair;
            }


            leavingQueue.push({leaveTime, assignedChair});
        }

        return -1; 
    }
};
